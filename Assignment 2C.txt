Assignment no: 2C
index.html
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Project</title>
<base href="/">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
<app-root></app-root>
</body>
</html>
main.ts
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';
platformBrowserDynamic().bootstrapModule(AppModule)
.catch(err => console.error(err));
login.component.html
<p>login works!</p>
<h1>Login</h1>
<form (ngSubmit)="onSubmit()">
<label>Email:</label>
<input type="email" [(ngModel)]="email" name="email" required>
<label>Password:</label>
<input type="password" [(ngModel)]="password" name="password" required>
<bu on type="submit">Login</bu on>
</form>
<p>{{ message }}</p>

login.component.specs.ts
import { ComponentFixture, TestBed } from '@angular/core/tes ng';
import { LoginComponent } from './login.component';

describe('LoginComponent', () => {
let component: LoginComponent;
let ﬁxture: ComponentFixture<LoginComponent>;
beforeEach(async () => {
await TestBed.conﬁgureTes ngModule({
declara ons: [ LoginComponent ]
})
.compileComponents();
ﬁxture = TestBed.createComponent(LoginComponent);
component = ﬁxture.componentInstance;
ﬁxture.detectChanges();
});
it('should create', () => {
expect(component).toBeTruthy();
});
});
login.component.ts
import { Component } from '@angular/core';
import { H pClient } from '@angular/common/h p';
@Component({
selector: 'app-login',
templateUrl: './login.component.html',
styleUrls: ['./login.component.css']
})
export class LoginComponent {
email = ''; // Ini alize email property
password = ''; // Ini alize password property
message = ''; // Ini alize message property
constructor(private h p: H pClient) {}
onSubmit() {
const data = { email: this.email, password: this.password };

this.h p.post('/api/login', data).subscribe(
(response) => {
console.log(response);
this.message = 'Login successful!';
},
(error) => {
console.error(error);
this.message = 'Login failed!'; } ); }
}
output.component.html
<p>output works!</p>
<h1>Your Registra on Data:</h1>
<p>Name: {{name}}</p>
<p>Address: {{address}}</p>
<p>Contact: {{contact}}</p>
<p>Email: {{email}}</p>

output.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/tes ng';
import { OutputComponent } from './output.component';
describe('OutputComponent', () => {
let component: OutputComponent;
let ﬁxture: ComponentFixture<OutputComponent>;
beforeEach(async () => {
await TestBed.conﬁgureTes ngModule({
declara ons: [ OutputComponent ]
})
.compileComponents();
ﬁxture = TestBed.createComponent(OutputComponent);
component = ﬁxture.componentInstance;
ﬁxture.detectChanges();

});
it('should create', () => {
expect(component).toBeTruthy();
});
});

output.component.ts
import { Component, OnInit } from '@angular/core';
import { Ac vatedRoute } from '@angular/router';
@Component({
selector: 'app-output',
templateUrl: './output.component.html',
styleUrls: ['./output.component.css']
})
export class OutputComponent implements OnInit {

name = '';
address = '';
contact = '';
email = '';
constructor(private route: Ac vatedRoute) { }
ngOnInit(): void {
this.route.queryParams.subscribe(params => {
this.name = params['name'];
this.address = params['address'];
this.contact = params['contact'];
this.email = params['email'];
});
}}

package.json
{
"name": "project",
"version": "0.0.0",
"scripts": {
"ng": "ng",
"start": "ng serve",
"build": "ng build",
"watch": "ng build --watch --conﬁgura on development",
"test": "ng test"
},
"private": true,
"dependencies": {
"@angular/anima ons": "^15.2.0",
"@angular/common": "^15.2.0",
"@angular/compiler": "^15.2.0",
"@angular/core": "^15.2.0",
"@angular/forms": "^15.2.0",
"@angular/pla orm-browser": "^15.2.0",
"@angular/pla orm-browser-dynamic": "^15.2.0",
"@angular/router": "^15.2.0",
"rxjs": "~7.8.0",
"tslib": "^2.3.0",
"zone.js": "~0.12.0"
},
"devDependencies": {
"@angular-devkit/build-angular": "^15.2.7",
"@angular/cli": "~15.2.7",
"@angular/compiler-cli": "^15.2.0",
"@types/jasmine": "~4.3.0",

"jasmine-core": "~4.5.0",
"karma": "~6.4.0",
"karma-chrome-launcher": "~3.1.0",
"karma-coverage": "~2.2.0",
"karma-jasmine": "~5.1.0",
"karma-jasmine-html-reporter": "~2.0.0",
"typescript": "~4.9.4"
}
}
Output:

